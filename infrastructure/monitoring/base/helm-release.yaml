apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: monitoring-kube-prometheus-stack
  namespace: monitoring
  labels:
    app.kubernetes.io/name: monitoring
    app.kubernetes.io/instance: monitoring
    app.kubernetes.io/part-of: monitoring
spec:
  interval: 1h
  chart:
    spec:
      chart: kube-prometheus-stack
      version: "75.6.0" # Updated to available version
      sourceRef:
        kind: HelmRepository
        name: monitoring-prometheus-community
        namespace: monitoring
      interval: 1h
  install:
    createNamespace: true
    disableWait: false
    disableWaitForJobs: false
    disableHooks: false
    timeout: 10m
    remediation:
      retries: 3
  upgrade:
    remediation:
      remediateLastFailure: true
    timeout: 10m
  values:
    # Install CRDs
    crds:
      create: true
      install: true

    # Namespace to install CRDs into (default is the release namespace)
    crdsNamespace: monitoring

    # Grafana configuration
    grafana:
      enabled: true
      admin:
        existingSecret: grafana-base-credentials
        userKey: admin-user
        passwordKey: admin-password
      persistence:
        enabled: true
        storageClassName: longhorn
        size: 10Gi
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: "longhorn"
              orgId: 1
              folder: "Longhorn"
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/longhorn
      dashboards:
        longhorn:
          longhorn-dashboard:
            url: https://raw.githubusercontent.com/longhorn/longhorn/v1.5.1/deploy/longhorn-grafana-dashboard.json
            datasource: Prometheus
      additionalDataSources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus-operated.monitoring.svc:9090
          access: proxy
          isDefault: true

    # Prometheus configuration
    prometheus:
      enabled: true
      prometheusSpec:
        retention: 10d
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 50Gi
        # Enable service monitor discovery
        serviceMonitorSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        ruleSelector: {}
        ruleNamespaceSelector: {}
        # Scrape config for Longhorn
        additionalScrapeConfigs:
          - job_name: "longhorn-prometheus-servicemonitor"
            kubernetes_sd_configs:
              - role: endpoints
                namespaces:
                  names:
                    - longhorn-system
            relabel_configs:
              - source_labels: [__meta_kubernetes_service_label_app]
                action: keep
                regex: longhorn-manager
              - source_labels: [__meta_kubernetes_endpoint_port_name]
                action: keep
                regex: manager

    # Alertmanager configuration (disabled by default)
    alertmanager:
      enabled: false
      alertmanagerSpec:
        retention: 120h
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 10Gi

    # Disable node exporter if already running on nodes
    prometheus-node-exporter:
      enabled: false

    # Disable kube-state-metrics if already running
    kube-state-metrics:
      enabled: false

    # Disable components we don't need
    prometheusOperator:
      tls:
        enabled: false
      admissionWebhooks:
        enabled: false
      tlsProxy:
        enabled: false
      kubeletService:
        enabled: false
