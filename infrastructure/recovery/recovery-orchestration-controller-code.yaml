apiVersion: v1
kind: ConfigMap
metadata:
  name: recovery-orchestration-controller-code
  namespace: flux-recovery
  labels:
    app.kubernetes.io/name: recovery-orchestration-controller
    app.kubernetes.io/part-of: flux-recovery
data:
  recovery-orchestration-controller.py: |
    #!/usr/bin/env python3
    """
    Recovery Orchestration Controller for GitOps Resilience
    
    This controller orchestrates recovery procedures by coordinating error pattern detection,
    dependency analysis, and resource recreation. It implements recovery state tracking,
    retry logic, and ensures safe recovery operations.
    
    Key Features:
    - Orchestrates recovery workflows across multiple components
    - Implements recovery state tracking and persistence
    - Provides retry logic with exponential backoff
    - Coordinates with error pattern detector and dependency analyzer
    - Ensures safe recovery operations with validation
    - Supports parallel and sequential recovery operations
    - Implements recovery rollback and escalation procedures
    """
    
    import asyncio
    import json
    import logging
    import os
    import time
    import yaml
    import hashlib
    import signal
    import sys
    from datetime import datetime, timedelta
    from typing import Dict, List, Optional, Any, Set, Tuple
    from dataclasses import dataclass, asdict, field
    from enum import Enum
    from collections import defaultdict, deque
    import subprocess
    import tempfile
    
    try:
        from kubernetes import client, config, watch
        from kubernetes.client.rest import ApiException
        import kubernetes.client.models as k8s_models
    except ImportError:
        print("kubernetes library not available - this is expected in the container")
        # Mock the classes for syntax checking
        class client:
            class V1Event: pass
            class CustomObjectsApi: pass
            class CoreV1Api: pass
            class AppsV1Api: pass
        class config:
            @staticmethod
            def load_incluster_config(): pass
        class watch:
            class Watch: pass
        class ApiException(Exception): pass
        class k8s_models: pass
    
    class RecoveryStatus(Enum):
        """Status of recovery operations"""
        PENDING = "pending"
        QUEUED = "queued"
        IN_PROGRESS = "in_progress"
        VALIDATING = "validating"
        SUCCEEDED = "succeeded"
        FAILED = "failed"
        RETRY_SCHEDULED = "retry_scheduled"
        RETRY_EXHAUSTED = "retry_exhausted"
        MANUAL_INTERVENTION = "manual_intervention"
        ESCALATED = "escalated"
        CANCELLED = "cancelled"
        ROLLED_BACK = "rolled_back"
    
    class RecoveryPriority(Enum):
        """Priority levels for recovery operations"""
        LOW = 1
        MEDIUM = 2
        HIGH = 3
        CRITICAL = 4
        EMERGENCY = 5
    
    class RecoveryType(Enum):
        """Types of recovery operations"""
        RESOURCE_RECREATION = "resource_recreation"
        HELM_ROLLBACK = "helm_rollback"
        HELM_RESET = "helm_reset"
        DEPENDENCY_RESOLUTION = "dependency_resolution"
        CONFIGURATION_REPAIR = "configuration_repair"
        STATE_CLEANUP = "state_cleanup"
        MANUAL_INTERVENTION = "manual_intervention"@datacla
    ss
    class RecoveryOperation:
        """Represents a recovery operation with full lifecycle tracking"""
        id: str
        resource_key: str
        recovery_type: RecoveryType
        recovery_action: str
        status: RecoveryStatus
        priority: RecoveryPriority
        created_at: datetime
        started_at: Optional[datetime] = None
        completed_at: Optional[datetime] = None
        retry_count: int = 0
        max_retries: int = 3
        error_pattern: str = ""
        context: Dict[str, Any] = field(default_factory=dict)
        dependencies: List[str] = field(default_factory=list)
        dependents: List[str] = field(default_factory=list)
        steps: List[Dict[str, Any]] = field(default_factory=list)
        current_step: int = 0
        rollback_data: Dict[str, Any] = field(default_factory=dict)
        validation_results: Dict[str, Any] = field(default_factory=dict)
        execution_log: List[Dict[str, Any]] = field(default_factory=list)
        timeout_seconds: int = 600
        
        def to_dict(self) -> Dict[str, Any]:
            """Convert to dictionary for serialization"""
            data = asdict(self)
            data['recovery_type'] = self.recovery_type.value
            data['status'] = self.status.value
            data['priority'] = self.priority.value
            data['created_at'] = self.created_at.isoformat()
            data['started_at'] = self.started_at.isoformat() if self.started_at else None
            data['completed_at'] = self.completed_at.isoformat() if self.completed_at else None
            return data
        
        def add_log_entry(self, level: str, message: str, details: Dict[str, Any] = None):
            """Add entry to execution log"""
            self.execution_log.append({
                'timestamp': datetime.now().isoformat(),
                'level': level,
                'message': message,
                'step': self.current_step,
                'details': details or {}
            })
        
        def is_expired(self) -> bool:
            """Check if operation has exceeded timeout"""
            if not self.started_at:
                return False
            return (datetime.now() - self.started_at).total_seconds() > self.timeout_seconds
        
        def can_retry(self) -> bool:
            """Check if operation can be retried"""
            return self.retry_count < self.max_retries and self.status in [
                RecoveryStatus.FAILED, RecoveryStatus.RETRY_SCHEDULED
            ]
    
    @dataclass
    class RecoveryBatch:
        """Represents a batch of recovery operations that can run in parallel"""
        id: str
        operations: List[RecoveryOperation]
        status: RecoveryStatus
        created_at: datetime
        started_at: Optional[datetime] = None
        completed_at: Optional[datetime] = None
        parallel_execution: bool = True
        
        def all_completed(self) -> bool:
            """Check if all operations in batch are completed"""
            return all(op.status in [
                RecoveryStatus.SUCCEEDED, 
                RecoveryStatus.FAILED, 
                RecoveryStatus.RETRY_EXHAUSTED,
                RecoveryStatus.CANCELLED
            ] for op in self.operations)
        
        def has_failures(self) -> bool:
            """Check if any operations in batch have failed"""
            return any(op.status in [
                RecoveryStatus.FAILED,
                RecoveryStatus.RETRY_EXHAUSTED
            ] for op in self.operations)
    
    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger('recovery-orchestrator')class
     RecoveryOrchestrator:
        """Main orchestration controller for recovery operations"""
        
        def __init__(self, config_path: str = '/etc/recovery-config/recovery-patterns.yaml'):
            self.config_path = config_path
            self.config = {}
            self.recovery_actions = {}
            self.settings = {}
            
            # Kubernetes clients
            self.core_v1 = None
            self.apps_v1 = None
            self.custom_objects = None
            self.client_initialized = False
            
            # Recovery state management
            self.active_operations: Dict[str, RecoveryOperation] = {}
            self.completed_operations: Dict[str, RecoveryOperation] = {}
            self.recovery_queue: deque = deque()
            self.recovery_batches: Dict[str, RecoveryBatch] = {}
            self.operation_history: deque = deque(maxlen=1000)
            
            # Coordination with other components
            self.error_pattern_state = {}
            self.dependency_analysis_cache = {}
            self.resource_health_cache = {}
            
            # Metrics and monitoring
            self.metrics = {
                'operations_created': 0,
                'operations_completed': 0,
                'operations_failed': 0,
                'operations_retried': 0,
                'average_recovery_time': 0.0,
                'success_rate': 0.0
            }
            
            # Controller health
            self.controller_health = {
                'status': 'initializing',
                'last_heartbeat': datetime.now(),
                'uptime_start': datetime.now(),
                'active_operations_count': 0,
                'queue_size': 0
            }
            
            # Graceful shutdown
            self.shutdown_requested = False
            signal.signal(signal.SIGTERM, self._handle_shutdown)
            signal.signal(signal.SIGINT, self._handle_shutdown)
            
            # Load configuration
            self.load_config()
        
        def _handle_shutdown(self, signum, frame):
            """Handle graceful shutdown"""
            logger.info(f"Received shutdown signal {signum}, initiating graceful shutdown...")
            self.shutdown_requested = True
            self.controller_health['status'] = 'shutting_down'
        
        def load_config(self):
            """Load recovery configuration"""
            try:
                with open(self.config_path, 'r') as f:
                    self.config = yaml.safe_load(f)
                
                self.recovery_actions = self.config.get('recovery_actions', {})
                self.settings = self.config.get('settings', {})
                
                # Set default settings
                self.settings = {
                    'max_concurrent_operations': 5,
                    'operation_timeout': 600,
                    'retry_delay_base': 30,
                    'retry_delay_max': 300,
                    'batch_processing_enabled': True,
                    'parallel_execution_enabled': True,
                    'validation_enabled': True,
                    'rollback_enabled': True,
                    'state_persistence_enabled': True,
                    'health_check_interval': 30,
                    **self.settings
                }
                
                logger.info(f"✅ Loaded {len(self.recovery_actions)} recovery actions")
                logger.info(f"✅ Configuration validation completed")
                
            except Exception as e:
                logger.error(f"❌ Failed to load config: {e}")
                self._use_default_config()
        
        def _use_default_config(self):
            """Use minimal default configuration"""
            logger.warning("🔄 Using default minimal configuration")
            self.recovery_actions = {}
            self.settings = {
                'max_concurrent_operations': 5,
                'operation_timeout': 600,
                'retry_delay_base': 30,
                'retry_delay_max': 300,
                'batch_processing_enabled': True,
                'parallel_execution_enabled': True,
                'validation_enabled': True,
                'rollback_enabled': True,
                'state_persistence_enabled': True,
                'health_check_interval': 30
            }    a
    sync def initialize_kubernetes_clients(self):
            """Initialize Kubernetes API clients"""
            try:
                logger.info("🔌 Initializing Kubernetes clients...")
                
                config.load_incluster_config()
                self.core_v1 = client.CoreV1Api()
                self.apps_v1 = client.AppsV1Api()
                self.custom_objects = client.CustomObjectsApi()
                
                # Test connectivity
                await self._test_kubernetes_connectivity()
                
                self.client_initialized = True
                logger.info("✅ Kubernetes clients initialized successfully")
                
            except Exception as e:
                logger.error(f"❌ Failed to initialize Kubernetes clients: {e}")
                raise
        
        async def _test_kubernetes_connectivity(self):
            """Test Kubernetes API connectivity"""
            try:
                await asyncio.get_event_loop().run_in_executor(
                    None, self.core_v1.get_api_resources
                )
                logger.debug("✅ Kubernetes connectivity test passed")
            except Exception as e:
                logger.error(f"❌ Kubernetes connectivity test failed: {e}")
                raise
        
        async def create_recovery_operation(self, 
                                          resource_key: str,
                                          recovery_type: RecoveryType,
                                          recovery_action: str,
                                          error_pattern: str = "",
                                          priority: RecoveryPriority = RecoveryPriority.MEDIUM,
                                          context: Dict[str, Any] = None) -> RecoveryOperation:
            """Create a new recovery operation"""
            
            operation_id = self._generate_operation_id(resource_key, recovery_action)
            
            # Check if similar operation already exists
            if operation_id in self.active_operations:
                existing_op = self.active_operations[operation_id]
                logger.warning(f"⚠️  Similar recovery operation already active: {operation_id}")
                return existing_op
            
            # Create recovery operation
            operation = RecoveryOperation(
                id=operation_id,
                resource_key=resource_key,
                recovery_type=recovery_type,
                recovery_action=recovery_action,
                status=RecoveryStatus.PENDING,
                priority=priority,
                created_at=datetime.now(),
                error_pattern=error_pattern,
                context=context or {},
                timeout_seconds=self.settings.get('operation_timeout', 600)
            )
            
            # Load recovery steps
            if recovery_action in self.recovery_actions:
                action_config = self.recovery_actions[recovery_action]
                operation.steps = action_config.get('steps', [])
                operation.max_retries = action_config.get('max_retries', 3)
                operation.timeout_seconds = action_config.get('timeout', 600)
            
            # Analyze dependencies if enabled
            if self.settings.get('dependency_analysis_enabled', True):
                await self._analyze_operation_dependencies(operation)
            
            # Add to active operations
            self.active_operations[operation_id] = operation
            self.metrics['operations_created'] += 1
            
            operation.add_log_entry('info', f"Recovery operation created: {recovery_action}")
            logger.info(f"📋 Created recovery operation: {operation_id}")
            logger.info(f"   Resource: {resource_key}")
            logger.info(f"   Action: {recovery_action}")
            logger.info(f"   Priority: {priority.name}")
            
            return operation
        
        def _generate_operation_id(self, resource_key: str, recovery_action: str) -> str:
            """Generate unique operation ID"""
            timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
            hash_input = f"{resource_key}:{recovery_action}:{timestamp}"
            hash_suffix = hashlib.md5(hash_input.encode()).hexdigest()[:8]
            return f"recovery-{hash_suffix}"
        
        async def _analyze_operation_dependencies(self, operation: RecoveryOperation):
            """Analyze dependencies for recovery operation"""
            try:
                # This would integrate with the dependency analyzer
                # For now, we'll simulate basic dependency analysis
                
                resource_parts = operation.resource_key.split('/')
                if len(resource_parts) >= 3:
                    namespace, kind, name = resource_parts[0], resource_parts[1], resource_parts[2]
                    
                    # Basic dependency rules
                    if kind == 'Deployment':
                        # Deployments may depend on ConfigMaps and Secrets
                        operation.dependencies.extend([
                            f"{namespace}/ConfigMap/{name}-config",
                            f"{namespace}/Secret/{name}-secret"
                        ])
                    elif kind == 'Service':
                        # Services depend on Deployments
                        operation.dependencies.append(f"{namespace}/Deployment/{name}")
                    elif kind == 'HelmRelease':
                        # HelmReleases depend on HelmRepositories
                        operation.dependencies.append(f"{namespace}/HelmRepository/{name}")
                
                operation.add_log_entry('debug', f"Analyzed dependencies: {len(operation.dependencies)} found")
                
            except Exception as e:
                logger.error(f"❌ Error analyzing dependencies for {operation.id}: {e}")
                operation.add_log_entry('error', f"Dependency analysis failed: {e}")
        
        async def queue_recovery_operation(self, operation: RecoveryOperation):
            """Queue recovery operation for execution"""
            operation.status = RecoveryStatus.QUEUED
            self.recovery_queue.append(operation)
            
            operation.add_log_entry('info', "Operation queued for execution")
            logger.info(f"📥 Queued recovery operation: {operation.id}")
            
            # Update controller health
            self.controller_health['queue_size'] = len(self.recovery_queue)    
    async def process_recovery_queue(self):
            """Process queued recovery operations"""
            if not self.recovery_queue:
                return
            
            max_concurrent = self.settings.get('max_concurrent_operations', 5)
            active_count = len([op for op in self.active_operations.values() 
                               if op.status == RecoveryStatus.IN_PROGRESS])
            
            if active_count >= max_concurrent:
                logger.debug(f"⏸️  Max concurrent operations reached ({active_count}/{max_concurrent})")
                return
            
            # Process operations by priority
            available_slots = max_concurrent - active_count
            operations_to_process = []
            
            # Sort queue by priority (highest first)
            sorted_queue = sorted(self.recovery_queue, key=lambda op: op.priority.value, reverse=True)
            
            for operation in sorted_queue[:available_slots]:
                operations_to_process.append(operation)
                self.recovery_queue.remove(operation)
            
            # Create batches if batch processing is enabled
            if self.settings.get('batch_processing_enabled', True):
                await self._create_recovery_batches(operations_to_process)
            else:
                # Process operations individually
                for operation in operations_to_process:
                    await self._execute_recovery_operation(operation)
        
        async def _create_recovery_batches(self, operations: List[RecoveryOperation]):
            """Create recovery batches for parallel execution"""
            if not operations:
                return
            
            # Group operations by dependencies and priority
            batches = []
            remaining_operations = operations.copy()
            
            while remaining_operations:
                current_batch = []
                
                # Find operations that can run in parallel (no dependencies on each other)
                for operation in remaining_operations.copy():
                    can_add_to_batch = True
                    
                    # Check if operation depends on any operation in current batch
                    for batch_op in current_batch:
                        if (batch_op.resource_key in operation.dependencies or
                            operation.resource_key in batch_op.dependencies):
                            can_add_to_batch = False
                            break
                    
                    if can_add_to_batch:
                        current_batch.append(operation)
                        remaining_operations.remove(operation)
                
                if current_batch:
                    batch_id = f"batch-{datetime.now().strftime('%Y%m%d-%H%M%S')}-{len(batches)}"
                    batch = RecoveryBatch(
                        id=batch_id,
                        operations=current_batch,
                        status=RecoveryStatus.QUEUED,
                        created_at=datetime.now(),
                        parallel_execution=self.settings.get('parallel_execution_enabled', True)
                    )
                    
                    batches.append(batch)
                    self.recovery_batches[batch_id] = batch
                    
                    logger.info(f"📦 Created recovery batch: {batch_id} with {len(current_batch)} operations")
            
            # Execute batches
            for batch in batches:
                await self._execute_recovery_batch(batch)
        
        async def _execute_recovery_batch(self, batch: RecoveryBatch):
            """Execute a recovery batch"""
            batch.status = RecoveryStatus.IN_PROGRESS
            batch.started_at = datetime.now()
            
            logger.info(f"🚀 Executing recovery batch: {batch.id}")
            
            if batch.parallel_execution:
                # Execute operations in parallel
                tasks = []
                for operation in batch.operations:
                    task = asyncio.create_task(self._execute_recovery_operation(operation))
                    tasks.append(task)
                
                await asyncio.gather(*tasks, return_exceptions=True)
            else:
                # Execute operations sequentially
                for operation in batch.operations:
                    await self._execute_recovery_operation(operation)
                    
                    # Stop if operation failed and batch requires sequential success
                    if operation.status == RecoveryStatus.FAILED:
                        logger.warning(f"⚠️  Batch {batch.id} stopped due to operation failure: {operation.id}")
                        break
            
            batch.completed_at = datetime.now()
            batch.status = RecoveryStatus.SUCCEEDED if not batch.has_failures() else RecoveryStatus.FAILED
            
            logger.info(f"✅ Completed recovery batch: {batch.id} (status: {batch.status.value})")    async de
    f _execute_recovery_operation(self, operation: RecoveryOperation):
            """Execute a single recovery operation"""
            operation.status = RecoveryStatus.IN_PROGRESS
            operation.started_at = datetime.now()
            
            logger.info(f"🔧 Executing recovery operation: {operation.id}")
            operation.add_log_entry('info', "Starting recovery operation execution")
            
            try:
                # Execute recovery steps
                for i, step in enumerate(operation.steps):
                    operation.current_step = i
                    step_name = step if isinstance(step, str) else step.get('name', f'step_{i}')
                    
                    logger.info(f"   Step {i+1}/{len(operation.steps)}: {step_name}")
                    operation.add_log_entry('info', f"Executing step: {step_name}")
                    
                    # Check for timeout
                    if operation.is_expired():
                        raise TimeoutError(f"Operation timeout after {operation.timeout_seconds} seconds")
                    
                    # Execute step
                    step_result = await self._execute_recovery_step(operation, step, step_name)
                    
                    if not step_result:
                        raise Exception(f"Step failed: {step_name}")
                    
                    operation.add_log_entry('info', f"Step completed: {step_name}")
                
                # Validate recovery if enabled
                if self.settings.get('validation_enabled', True):
                    operation.status = RecoveryStatus.VALIDATING
                    validation_result = await self._validate_recovery(operation)
                    
                    if not validation_result:
                        raise Exception("Recovery validation failed")
                
                # Mark as succeeded
                operation.status = RecoveryStatus.SUCCEEDED
                operation.completed_at = datetime.now()
                
                # Update metrics
                self.metrics['operations_completed'] += 1
                recovery_time = (operation.completed_at - operation.started_at).total_seconds()
                self._update_average_recovery_time(recovery_time)
                
                operation.add_log_entry('info', "Recovery operation completed successfully")
                logger.info(f"✅ Recovery operation completed: {operation.id}")
                
            except Exception as e:
                await self._handle_recovery_failure(operation, str(e))
            
            finally:
                # Move to completed operations
                if operation.id in self.active_operations:
                    del self.active_operations[operation.id]
                
                self.completed_operations[operation.id] = operation
                self.operation_history.append(operation)
                
                # Update controller health
                self.controller_health['active_operations_count'] = len(self.active_operations)
        
        async def _execute_recovery_step(self, operation: RecoveryOperation, step: Any, step_name: str) -> bool:
            """Execute a single recovery step"""
            try:
                # This is where we would implement the actual recovery actions
                # For now, we'll simulate the execution
                
                if step_name == "backup_resource_spec":
                    return await self._backup_resource_spec(operation)
                elif step_name == "delete_resource_gracefully":
                    return await self._delete_resource_gracefully(operation)
                elif step_name == "recreate_resource":
                    return await self._recreate_resource(operation)
                elif step_name == "verify_recreation":
                    return await self._verify_recreation(operation)
                elif step_name == "suspend_helmrelease":
                    return await self._suspend_helmrelease(operation)
                elif step_name == "rollback_helm_chart":
                    return await self._rollback_helm_chart(operation)
                elif step_name == "resume_helmrelease":
                    return await self._resume_helmrelease(operation)
                else:
                    # Generic step execution
                    logger.info(f"   Executing generic step: {step_name}")
                    await asyncio.sleep(2)  # Simulate work
                    return True
                    
            except Exception as e:
                logger.error(f"❌ Step execution failed: {step_name} - {e}")
                operation.add_log_entry('error', f"Step failed: {step_name} - {e}")
                return False    async
     def _backup_resource_spec(self, operation: RecoveryOperation) -> bool:
            """Backup resource specification before modification"""
            try:
                resource_parts = operation.resource_key.split('/')
                if len(resource_parts) < 3:
                    return False
                
                namespace, kind, name = resource_parts[0], resource_parts[1], resource_parts[2]
                
                # Get current resource spec
                if kind == "Deployment":
                    resource = await asyncio.get_event_loop().run_in_executor(
                        None, self.apps_v1.read_namespaced_deployment, name, namespace
                    )
                elif kind == "Service":
                    resource = await asyncio.get_event_loop().run_in_executor(
                        None, self.core_v1.read_namespaced_service, name, namespace
                    )
                else:
                    logger.warning(f"⚠️  Backup not implemented for resource type: {kind}")
                    return True  # Don't fail for unsupported types
                
                # Store backup in rollback data
                operation.rollback_data['original_spec'] = resource.to_dict()
                operation.rollback_data['backup_timestamp'] = datetime.now().isoformat()
                
                logger.info(f"   Backed up {kind} {namespace}/{name}")
                return True
                
            except Exception as e:
                logger.error(f"❌ Backup failed: {e}")
                return False
        
        async def _delete_resource_gracefully(self, operation: RecoveryOperation) -> bool:
            """Delete resource gracefully"""
            try:
                resource_parts = operation.resource_key.split('/')
                if len(resource_parts) < 3:
                    return False
                
                namespace, kind, name = resource_parts[0], resource_parts[1], resource_parts[2]
                
                # Delete resource based on type
                if kind == "Deployment":
                    await asyncio.get_event_loop().run_in_executor(
                        None, self.apps_v1.delete_namespaced_deployment, name, namespace
                    )
                elif kind == "Service":
                    await asyncio.get_event_loop().run_in_executor(
                        None, self.core_v1.delete_namespaced_service, name, namespace
                    )
                else:
                    logger.warning(f"⚠️  Deletion not implemented for resource type: {kind}")
                    return True
                
                # Wait for deletion to complete
                await asyncio.sleep(5)
                
                logger.info(f"   Deleted {kind} {namespace}/{name}")
                return True
                
            except ApiException as e:
                if e.status == 404:
                    logger.info(f"   Resource already deleted: {operation.resource_key}")
                    return True
                logger.error(f"❌ Deletion failed: {e}")
                return False
            except Exception as e:
                logger.error(f"❌ Deletion failed: {e}")
                return False
        
        async def _recreate_resource(self, operation: RecoveryOperation) -> bool:
            """Recreate resource from backup"""
            try:
                if 'original_spec' not in operation.rollback_data:
                    logger.error("❌ No backup data available for recreation")
                    return False
                
                resource_spec = operation.rollback_data['original_spec']
                resource_parts = operation.resource_key.split('/')
                
                if len(resource_parts) < 3:
                    return False
                
                namespace, kind, name = resource_parts[0], resource_parts[1], resource_parts[2]
                
                # Remove fields that shouldn't be in create request
                if 'metadata' in resource_spec:
                    resource_spec['metadata'].pop('resourceVersion', None)
                    resource_spec['metadata'].pop('uid', None)
                    resource_spec['metadata'].pop('creationTimestamp', None)
                    resource_spec['metadata'].pop('generation', None)
                
                # Recreate resource based on type
                if kind == "Deployment":
                    body = client.V1Deployment(**resource_spec)
                    await asyncio.get_event_loop().run_in_executor(
                        None, self.apps_v1.create_namespaced_deployment, namespace, body
                    )
                elif kind == "Service":
                    body = client.V1Service(**resource_spec)
                    await asyncio.get_event_loop().run_in_executor(
                        None, self.core_v1.create_namespaced_service, namespace, body
                    )
                else:
                    logger.warning(f"⚠️  Recreation not implemented for resource type: {kind}")
                    return True
                
                logger.info(f"   Recreated {kind} {namespace}/{name}")
                return True
                
            except Exception as e:
                logger.error(f"❌ Recreation failed: {e}")
                return False  
      async def _verify_recreation(self, operation: RecoveryOperation) -> bool:
            """Verify that resource recreation was successful"""
            try:
                resource_parts = operation.resource_key.split('/')
                if len(resource_parts) < 3:
                    return False
                
                namespace, kind, name = resource_parts[0], resource_parts[1], resource_parts[2]
                
                # Wait for resource to be ready
                max_wait = 60  # seconds
                wait_interval = 5
                
                for _ in range(max_wait // wait_interval):
                    try:
                        if kind == "Deployment":
                            resource = await asyncio.get_event_loop().run_in_executor(
                                None, self.apps_v1.read_namespaced_deployment, name, namespace
                            )
                            # Check if deployment is ready
                            if (resource.status and resource.status.ready_replicas and 
                                resource.status.ready_replicas > 0):
                                logger.info(f"   Verified {kind} {namespace}/{name} is ready")
                                return True
                        elif kind == "Service":
                            resource = await asyncio.get_event_loop().run_in_executor(
                                None, self.core_v1.read_namespaced_service, name, namespace
                            )
                            # Service exists, consider it ready
                            logger.info(f"   Verified {kind} {namespace}/{name} exists")
                            return True
                        
                        await asyncio.sleep(wait_interval)
                        
                    except ApiException as e:
                        if e.status != 404:
                            raise
                        await asyncio.sleep(wait_interval)
                
                logger.warning(f"⚠️  Verification timeout for {operation.resource_key}")
                return False
                
            except Exception as e:
                logger.error(f"❌ Verification failed: {e}")
                return False
        
        async def _suspend_helmrelease(self, operation: RecoveryOperation) -> bool:
            """Suspend HelmRelease reconciliation"""
            try:
                resource_parts = operation.resource_key.split('/')
                if len(resource_parts) < 3:
                    return False
                
                namespace, kind, name = resource_parts[0], resource_parts[1], resource_parts[2]
                
                if kind != "HelmRelease":
                    return True  # Not applicable
                
                # Patch HelmRelease to suspend
                patch = {"spec": {"suspend": True}}
                
                await asyncio.get_event_loop().run_in_executor(
                    None, 
                    self.custom_objects.patch_namespaced_custom_object,
                    "helm.toolkit.fluxcd.io", "v2beta1", namespace, "helmreleases", name, patch
                )
                
                logger.info(f"   Suspended HelmRelease {namespace}/{name}")
                return True
                
            except Exception as e:
                logger.error(f"❌ HelmRelease suspension failed: {e}")
                return False
        
        async def _rollback_helm_chart(self, operation: RecoveryOperation) -> bool:
            """Rollback Helm chart to previous version"""
            try:
                # This would require integration with Helm CLI or Flux APIs
                # For now, we'll simulate the rollback
                logger.info(f"   Simulating Helm chart rollback for {operation.resource_key}")
                await asyncio.sleep(3)
                return True
                
            except Exception as e:
                logger.error(f"❌ Helm rollback failed: {e}")
                return False
        
        async def _resume_helmrelease(self, operation: RecoveryOperation) -> bool:
            """Resume HelmRelease reconciliation"""
            try:
                resource_parts = operation.resource_key.split('/')
                if len(resource_parts) < 3:
                    return False
                
                namespace, kind, name = resource_parts[0], resource_parts[1], resource_parts[2]
                
                if kind != "HelmRelease":
                    return True  # Not applicable
                
                # Patch HelmRelease to resume
                patch = {"spec": {"suspend": False}}
                
                await asyncio.get_event_loop().run_in_executor(
                    None,
                    self.custom_objects.patch_namespaced_custom_object,
                    "helm.toolkit.fluxcd.io", "v2beta1", namespace, "helmreleases", name, patch
                )
                
                logger.info(f"   Resumed HelmRelease {namespace}/{name}")
                return True
                
            except Exception as e:
                logger.error(f"❌ HelmRelease resume failed: {e}")
                return False    asy
    nc def _validate_recovery(self, operation: RecoveryOperation) -> bool:
            """Validate that recovery was successful"""
            try:
                logger.info(f"   Validating recovery for {operation.resource_key}")
                
                # Basic validation - check if resource exists and is healthy
                resource_parts = operation.resource_key.split('/')
                if len(resource_parts) < 3:
                    return False
                
                namespace, kind, name = resource_parts[0], resource_parts[1], resource_parts[2]
                
                # Wait a bit for resource to stabilize
                await asyncio.sleep(10)
                
                # Check resource status
                if kind == "Deployment":
                    resource = await asyncio.get_event_loop().run_in_executor(
                        None, self.apps_v1.read_namespaced_deployment, name, namespace
                    )
                    
                    # Check deployment status
                    if (resource.status and 
                        resource.status.ready_replicas and 
                        resource.status.ready_replicas == resource.spec.replicas):
                        
                        operation.validation_results = {
                            'status': 'healthy',
                            'ready_replicas': resource.status.ready_replicas,
                            'desired_replicas': resource.spec.replicas,
                            'validation_timestamp': datetime.now().isoformat()
                        }
                        
                        logger.info(f"   ✅ Validation passed for {operation.resource_key}")
                        return True
                    else:
                        operation.validation_results = {
                            'status': 'unhealthy',
                            'ready_replicas': resource.status.ready_replicas if resource.status else 0,
                            'desired_replicas': resource.spec.replicas,
                            'validation_timestamp': datetime.now().isoformat()
                        }
                        
                        logger.warning(f"   ⚠️  Validation failed for {operation.resource_key}")
                        return False
                
                # For other resource types, basic existence check
                logger.info(f"   ✅ Basic validation passed for {operation.resource_key}")
                return True
                
            except Exception as e:
                logger.error(f"❌ Validation failed: {e}")
                operation.validation_results = {
                    'status': 'error',
                    'error': str(e),
                    'validation_timestamp': datetime.now().isoformat()
                }
                return False
        
        async def _handle_recovery_failure(self, operation: RecoveryOperation, error: str):
            """Handle recovery operation failure"""
            operation.status = RecoveryStatus.FAILED
            operation.completed_at = datetime.now()
            
            operation.add_log_entry('error', f"Recovery operation failed: {error}")
            logger.error(f"❌ Recovery operation failed: {operation.id} - {error}")
            
            # Update metrics
            self.metrics['operations_failed'] += 1
            
            # Check if operation can be retried
            if operation.can_retry():
                await self._schedule_retry(operation)
            else:
                # Check if rollback is enabled and possible
                if (self.settings.get('rollback_enabled', True) and 
                    operation.rollback_data and 
                    operation.recovery_type == RecoveryType.RESOURCE_RECREATION):
                    
                    await self._attempt_rollback(operation)
                else:
                    # Mark for manual intervention
                    operation.status = RecoveryStatus.MANUAL_INTERVENTION
                    logger.warning(f"⚠️  Manual intervention required for: {operation.id}")
        
        async def _schedule_retry(self, operation: RecoveryOperation):
            """Schedule operation retry with exponential backoff"""
            operation.retry_count += 1
            operation.status = RecoveryStatus.RETRY_SCHEDULED
            
            # Calculate retry delay with exponential backoff
            base_delay = self.settings.get('retry_delay_base', 30)
            max_delay = self.settings.get('retry_delay_max', 300)
            delay = min(base_delay * (2 ** (operation.retry_count - 1)), max_delay)
            
            operation.add_log_entry('info', f"Retry scheduled in {delay} seconds (attempt {operation.retry_count})")
            logger.info(f"🔄 Scheduling retry for {operation.id} in {delay}s (attempt {operation.retry_count})")
            
            # Update metrics
            self.metrics['operations_retried'] += 1
            
            # Schedule retry (in a real implementation, this would use a proper scheduler)
            asyncio.create_task(self._execute_retry_after_delay(operation, delay))
        
        async def _execute_retry_after_delay(self, operation: RecoveryOperation, delay: int):
            """Execute retry after specified delay"""
            await asyncio.sleep(delay)
            
            if not self.shutdown_requested and operation.id in self.active_operations:
                logger.info(f"🔄 Executing retry for {operation.id}")
                operation.status = RecoveryStatus.PENDING
                await self.queue_recovery_operation(operation) 
       async def _attempt_rollback(self, operation: RecoveryOperation):
            """Attempt to rollback failed recovery operation"""
            try:
                logger.info(f"🔙 Attempting rollback for {operation.id}")
                operation.add_log_entry('info', "Attempting recovery rollback")
                
                # Restore from backup if available
                if 'original_spec' in operation.rollback_data:
                    # This would restore the original resource state
                    # For now, we'll simulate the rollback
                    await asyncio.sleep(2)
                    
                    operation.status = RecoveryStatus.ROLLED_BACK
                    operation.add_log_entry('info', "Recovery rolled back successfully")
                    logger.info(f"✅ Rollback successful for {operation.id}")
                else:
                    logger.warning(f"⚠️  No rollback data available for {operation.id}")
                    operation.status = RecoveryStatus.MANUAL_INTERVENTION
                    
            except Exception as e:
                logger.error(f"❌ Rollback failed for {operation.id}: {e}")
                operation.status = RecoveryStatus.MANUAL_INTERVENTION
                operation.add_log_entry('error', f"Rollback failed: {e}")
        
        def _update_average_recovery_time(self, recovery_time: float):
            """Update average recovery time metric"""
            current_avg = self.metrics['average_recovery_time']
            completed_ops = self.metrics['operations_completed']
            
            if completed_ops == 1:
                self.metrics['average_recovery_time'] = recovery_time
            else:
                # Calculate running average
                self.metrics['average_recovery_time'] = (
                    (current_avg * (completed_ops - 1) + recovery_time) / completed_ops
                )
            
            # Update success rate
            total_ops = self.metrics['operations_completed'] + self.metrics['operations_failed']
            if total_ops > 0:
                self.metrics['success_rate'] = self.metrics['operations_completed'] / total_ops
        
        async def monitor_error_patterns(self):
            """Monitor for error patterns from error pattern detector"""
            logger.info("🔍 Starting error pattern monitoring...")
            
            while not self.shutdown_requested:
                try:
                    # Check for new error patterns (this would integrate with the error pattern detector)
                    # For now, we'll simulate pattern detection
                    
                    await self._check_error_pattern_state()
                    await self._check_stuck_reconciliations()
                    
                    await asyncio.sleep(30)  # Check every 30 seconds
                    
                except Exception as e:
                    logger.error(f"❌ Error in pattern monitoring: {e}")
                    await asyncio.sleep(60)
        
        async def _check_error_pattern_state(self):
            """Check error pattern detector state for new patterns"""
            try:
                # This would read from the error pattern detector's state
                # For now, we'll simulate finding patterns
                
                simulated_patterns = [
                    {
                        'resource_key': 'default/Deployment/test-app',
                        'pattern_name': 'immutable-field-conflict',
                        'recovery_action': 'recreate_resource',
                        'severity': 'high',
                        'first_seen': datetime.now().isoformat()
                    }
                ]
                
                for pattern in simulated_patterns:
                    # Check if we already have a recovery operation for this pattern
                    existing_ops = [op for op in self.active_operations.values() 
                                   if op.resource_key == pattern['resource_key']]
                    
                    if not existing_ops:
                        # Create recovery operation
                        recovery_type = RecoveryType.RESOURCE_RECREATION
                        priority = RecoveryPriority.HIGH if pattern['severity'] == 'high' else RecoveryPriority.MEDIUM
                        
                        operation = await self.create_recovery_operation(
                            resource_key=pattern['resource_key'],
                            recovery_type=recovery_type,
                            recovery_action=pattern['recovery_action'],
                            error_pattern=pattern['pattern_name'],
                            priority=priority,
                            context={'detected_by': 'error_pattern_detector', 'pattern_data': pattern}
                        )
                        
                        await self.queue_recovery_operation(operation)
                        
            except Exception as e:
                logger.error(f"❌ Error checking pattern state: {e}")
        
        async def _check_stuck_reconciliations(self):
            """Check for stuck reconciliations that need recovery"""
            try:
                # This would check Flux resource status for stuck reconciliations
                # For now, we'll simulate finding stuck resources
                
                stuck_resources = [
                    {
                        'resource_key': 'flux-system/Kustomization/infrastructure',
                        'stuck_duration': 600,  # seconds
                        'last_error': 'reconciliation timeout'
                    }
                ]
                
                stuck_threshold = self.settings.get('stuck_threshold', 300)
                
                for resource in stuck_resources:
                    if resource['stuck_duration'] > stuck_threshold:
                        # Check if we already have a recovery operation
                        existing_ops = [op for op in self.active_operations.values() 
                                       if op.resource_key == resource['resource_key']]
                        
                        if not existing_ops:
                            operation = await self.create_recovery_operation(
                                resource_key=resource['resource_key'],
                                recovery_type=RecoveryType.CONFIGURATION_REPAIR,
                                recovery_action='validate_and_retry',
                                error_pattern='stuck_reconciliation',
                                priority=RecoveryPriority.HIGH,
                                context={'stuck_duration': resource['stuck_duration'], 'last_error': resource['last_error']}
                            )
                            
                            await self.queue_recovery_operation(operation)
                            
            except Exception as e:
                logger.error(f"❌ Error checking stuck reconciliations: {e}") 
       async def health_check_loop(self):
            """Periodic health check and maintenance"""
            logger.info("💓 Starting health check loop...")
            
            health_check_interval = self.settings.get('health_check_interval', 30)
            
            while not self.shutdown_requested:
                try:
                    # Update controller health
                    self.controller_health.update({
                        'last_heartbeat': datetime.now(),
                        'active_operations_count': len(self.active_operations),
                        'queue_size': len(self.recovery_queue),
                        'status': 'healthy' if not self.shutdown_requested else 'shutting_down'
                    })
                    
                    # Check for expired operations
                    await self._cleanup_expired_operations()
                    
                    # Persist state if enabled
                    if self.settings.get('state_persistence_enabled', True):
                        await self._persist_recovery_state()
                    
                    # Log health summary
                    if len(self.active_operations) > 0 or len(self.recovery_queue) > 0:
                        logger.info(f"💓 Health check: {len(self.active_operations)} active, {len(self.recovery_queue)} queued")
                    
                    await asyncio.sleep(health_check_interval)
                    
                except Exception as e:
                    logger.error(f"❌ Error in health check: {e}")
                    await asyncio.sleep(health_check_interval)
        
        async def _cleanup_expired_operations(self):
            """Clean up expired operations"""
            expired_operations = []
            
            for operation in self.active_operations.values():
                if operation.is_expired():
                    expired_operations.append(operation)
            
            for operation in expired_operations:
                logger.warning(f"⏰ Operation expired: {operation.id}")
                operation.status = RecoveryStatus.FAILED
                operation.completed_at = datetime.now()
                operation.add_log_entry('error', "Operation expired due to timeout")
                
                # Move to completed operations
                del self.active_operations[operation.id]
                self.completed_operations[operation.id] = operation
                self.operation_history.append(operation)
                
                # Update metrics
                self.metrics['operations_failed'] += 1
        
        async def _persist_recovery_state(self):
            """Persist recovery state to ConfigMap"""
            try:
                state_data = {
                    'timestamp': datetime.now().isoformat(),
                    'active_operations': {op_id: op.to_dict() for op_id, op in self.active_operations.items()},
                    'metrics': self.metrics,
                    'controller_health': {
                        **self.controller_health,
                        'last_heartbeat': self.controller_health['last_heartbeat'].isoformat(),
                        'uptime_start': self.controller_health['uptime_start'].isoformat()
                    }
                }
                
                # This would update a ConfigMap with the state
                # For now, we'll just log that we would persist
                logger.debug(f"📝 Would persist state: {len(self.active_operations)} active operations")
                
            except Exception as e:
                logger.error(f"❌ Error persisting state: {e}")
        
        async def run(self):
            """Main run loop"""
            logger.info("🚀 Starting Recovery Orchestration Controller")
            
            try:
                # Initialize Kubernetes clients
                await self.initialize_kubernetes_clients()
                
                # Start background tasks
                tasks = [
                    asyncio.create_task(self.monitor_error_patterns()),
                    asyncio.create_task(self.health_check_loop()),
                ]
                
                # Main processing loop
                self.controller_health['status'] = 'running'
                
                while not self.shutdown_requested:
                    try:
                        # Process recovery queue
                        await self.process_recovery_queue()
                        
                        # Brief pause before next cycle
                        await asyncio.sleep(5)
                        
                    except Exception as e:
                        logger.error(f"❌ Error in main loop: {e}")
                        await asyncio.sleep(30)
                
                # Graceful shutdown
                logger.info("🛑 Shutting down gracefully...")
                
                # Cancel background tasks
                for task in tasks:
                    task.cancel()
                
                # Wait for active operations to complete (with timeout)
                shutdown_timeout = 60
                start_time = time.time()
                
                while self.active_operations and (time.time() - start_time) < shutdown_timeout:
                    logger.info(f"⏳ Waiting for {len(self.active_operations)} operations to complete...")
                    await asyncio.sleep(5)
                
                if self.active_operations:
                    logger.warning(f"⚠️  Shutdown timeout: {len(self.active_operations)} operations still active")
                
                logger.info("✅ Recovery Orchestration Controller shutdown complete")
                
            except Exception as e:
                logger.error(f"❌ Fatal error in controller: {e}")
                self.controller_health['status'] = 'error'
                raise
    
    def main():
        """Main entry point"""
        orchestrator = RecoveryOrchestrator()
        
        try:
            asyncio.run(orchestrator.run())
        except KeyboardInterrupt:
            logger.info("🛑 Received interrupt signal")
        except Exception as e:
            logger.error(f"❌ Controller failed: {e}")
            sys.exit(1)
    
    if __name__ == "__main__":
        main()