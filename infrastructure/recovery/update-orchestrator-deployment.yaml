---
apiVersion: v1
kind: ConfigMap
metadata:
  name: update-orchestrator-code
  namespace: flux-recovery
  labels:
    app.kubernetes.io/name: update-orchestrator
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: flux-recovery
data:
  update-orchestrator.py: |
    # This ConfigMap will contain the update orchestrator Python code
    # The actual code is in infrastructure/recovery/update-orchestrator.py
    # and should be copied here during deployment

    import sys
    import os

    # Add the app directory to Python path
    sys.path.append('/app')

    # Import and run the update orchestrator
    try:
        from update_orchestrator import UpdateOrchestrator
        import asyncio
        import logging

        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        logger = logging.getLogger('update-orchestrator')

        async def main():
            """Main entry point for the update orchestrator service"""
            logger.info("üöÄ Starting Update Orchestrator Service")

            # Create orchestrator instance
            orchestrator = UpdateOrchestrator(
                config_path='/etc/config/config.yaml'
            )

            # In a real deployment, this would:
            # 1. Watch for update requests (via CRDs or API)
            # 2. Process update plans
            # 3. Execute updates with dependency ordering
            # 4. Report status and metrics

            logger.info("üìã Update Orchestrator ready for requests")

            # For now, just run a demo loop
            cycle = 0
            while True:
                cycle += 1
                logger.info(f"üîç Update orchestrator cycle #{cycle}")

                # Check for pending update requests
                logger.info("üìä Checking for update requests...")
                logger.info("üîß No pending updates detected")

                # Wait before next cycle
                await asyncio.sleep(30)

        if __name__ == "__main__":
            asyncio.run(main())

    except ImportError as e:
        print(f"Error importing update orchestrator: {e}")
        print("Running in standalone mode...")

        import asyncio
        import logging

        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger('update-orchestrator-fallback')

        async def demo_orchestrator():
            logger.info("üöÄ Update Orchestrator Service (Fallback Mode)")
            logger.info("üìã This is a simplified version for demonstration")

            cycle = 0
            while True:
                cycle += 1
                logger.info(f"üîç Update orchestrator cycle #{cycle}")
                logger.info("üìä Checking for update requests...")
                logger.info("üîß No active update operations detected")

                await asyncio.sleep(30)

        try:
            asyncio.run(demo_orchestrator())
        except KeyboardInterrupt:
            logger.info("üõë Shutting down...")

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: update-orchestrator
  namespace: flux-recovery
  labels:
    app: update-orchestrator
    app.kubernetes.io/name: update-orchestrator
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: flux-recovery
spec:
  replicas: 1
  selector:
    matchLabels:
      app: update-orchestrator
  template:
    metadata:
      labels:
        app: update-orchestrator
        app.kubernetes.io/name: update-orchestrator
        app.kubernetes.io/component: controller
        app.kubernetes.io/part-of: flux-recovery
    spec:
      serviceAccountName: flux-recovery-controller
      containers:
        - name: update-orchestrator
          image: python:3.11-slim
          command:
            - python3
            - /app/update-orchestrator.py
          env:
            - name: PYTHONPATH
              value: "/app"
            - name: KUBECONFIG
              value: "/etc/kubeconfig/config"
          volumeMounts:
            - name: orchestrator-code
              mountPath: /app
            - name: config
              mountPath: /etc/config
            - name: kubeconfig
              mountPath: /etc/kubeconfig
              readOnly: true
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          livenessProbe:
            exec:
              command:
                - python3
                - -c
                - "import sys; sys.exit(0)"
            initialDelaySeconds: 30
            periodSeconds: 30
          readinessProbe:
            exec:
              command:
                - python3
                - -c
                - "import sys; sys.exit(0)"
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: orchestrator-code
          configMap:
            name: update-orchestrator-code
            defaultMode: 0755
        - name: config
          configMap:
            name: update-orchestrator-config
        - name: kubeconfig
          secret:
            secretName: flux-recovery-kubeconfig
            optional: true

---
apiVersion: v1
kind: Service
metadata:
  name: update-orchestrator
  namespace: flux-recovery
  labels:
    app: update-orchestrator
    app.kubernetes.io/name: update-orchestrator
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: flux-recovery
spec:
  selector:
    app: update-orchestrator
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: 9090
      protocol: TCP
  type: ClusterIP

---
# ServiceMonitor for Prometheus monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: update-orchestrator
  namespace: flux-recovery
  labels:
    app: update-orchestrator
    app.kubernetes.io/name: update-orchestrator
    app.kubernetes.io/component: controller
    app.kubernetes.io/part-of: flux-recovery
    monitoring.k3s-flux.io/component: update-orchestrator
spec:
  selector:
    matchLabels:
      app: update-orchestrator
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
      honorLabels: true
  namespaceSelector:
    matchNames:
      - flux-recovery
